name: "Development Build"

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]
  workflow_dispatch:

env:
  APP_NAME: heroku-container

jobs:

  Build:

    runs-on: ubuntu-latest

    environment:
      name: Test

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run the flake8 linter
      run: flake8

    - name: Run the pylint linter
      run: pylint --rcfile=.pylintrc api/

    # - name: Run the mypy linter
    #   run: mypy -p api

    - name: Create the Test Environment variables
      run: |
        touch .env
        echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
        echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env
        echo POSTGRES_HOST=localhost >> .env
        echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
        echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
        echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
        echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

    - name: Create the test tables
      run: |
        python manage.py create_db

    - name: Test with pytest
      run: |
        if [ -d tests ] || [ -d test ]; then python -m pytest; fi

    - name: Pytest Coverage
      run: |
        if [ -d tests ] || [ -d test ]; then coverage run -m pytest; fi
        if [ -d tests ] || [ -d test ]; then coverage report -m; fi

    - name: Coverage Report
      run: coverage xml

  Test-Local:

    runs-on: ubuntu-latest

    environment:
      name: Development

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    needs: [Build]

    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Create the Environment variables
      run: |
        touch .env
        echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
        echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env
        echo POSTGRES_HOST=localhost >> .env
        echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
        echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
        echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
        echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

    - name: Create the development tables
      run: |
        python manage.py create_db

    - name: Test application
      run: |
        python manage.py seed_db
        python manage.py run &
        sleep 10
        curl http://127.0.0.1:5000/
        curl http://127.0.0.1:5000/users

  DeployDev:

    name: Deploy to Dev

    if: github.event_name == 'pull_request'

    needs: [Test-Local]

    runs-on: ubuntu-latest

    environment:
      name: Development
      url: 'https://${{env.APP_NAME}}-dev.herokuapp.com/'

    steps:

      - name: Deploy
        run: echo I am deploying ${{ env.APP_NAME }} at https://${{env.APP_NAME}}-dev.herokuapp.com/

      - uses: actions/checkout@v2

      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "${{ env.APP_NAME }}-dev" #Must be unique in Heroku
          heroku_email: "${{ secrets.HEROKU_EMAIL }}"
          usedocker: true
          docker_heroku_process_type: web
          docker_build_args: |
            FLASK_ENV
            FLASK_APP
            SECRET_KEY
            POSTGRES_HOST
            POSTGRES_DB
            POSTGRES_PORT
            POSTGRES_USER
            POSTGRES_PASSWORD
        env:
          FLASK_ENV: ${{ secrets.FLASK_ENV }}
          FLASK_APP: ${{ secrets.FLASK_APP }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  Test-Remote:

    name: Test Remote Deployment

    needs: [DeployDev]

    runs-on: ubuntu-latest

    steps:

    - name: Test application
      run: |
        sleep 20
        curl https://${{env.APP_NAME}}-dev.herokuapp.com/
